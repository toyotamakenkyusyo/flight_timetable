<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta charset="UTF-8" />
		<style>table {border-collapse: collapse; table-layout: fixed;} th, td {border: solid 1px;} .便名 {width: 16em;} .機種 {width: 8em;} .注釈 {width: 16em;}</style>
		<script>
			//<![CDATA[
f_main();
async function f_main() {
	const c_schedules = f_convert_csv_to_json(await ((await (fetch("schedule.csv"))).text()));
	const c_airports = f_convert_csv_to_json(await ((await (fetch("airport.csv"))).text()));
	const c_operators = f_convert_csv_to_json(await ((await (fetch("operator.csv"))).text()));
	console.log(c_schedules);
	const c_od_index = {};
	for (const c_flight of c_schedules) {
		const c_od = c_flight.origin_airport + "_" + c_flight.destination_airport;
		if (c_od_index[c_od] === undefined) {
			c_od_index[c_od] = [];
		}
		c_od_index[c_od].push(c_flight);
	}
	const c_airport_index = {};
	for (const c_airport of c_airports) {
		c_airport_index[c_airport.airport] = c_airport;
	}
	const c_operator_index = {};
	for (const c_operator of c_operators) {
		c_operator_index[c_operator.operator] = c_operator;
	}
	
	const c_day_difference ={"0": "", "": "", "1": "翌日", "2": "翌翌日", "-1": "前日", "-2": "前前日"};
	
	// 時刻表表示
	let l_html = "";
	const c_index = {};
	for (const c_od in c_od_index) {
		const c_o = c_od.split("_")[0];
		const c_d = c_od.split("_")[1];
		const c_do = c_d + "_" + c_o;
		if (c_od.split("_")[0] > c_od.split("_")[1] && c_od_index[c_do] !== undefined) {
			continue;
		}
		// 目次準備
		if (c_index[c_o] === undefined) {
			c_index[c_o] = {};
		}
		if (c_index[c_d] === undefined) {
			c_index[c_d] = {};
		}
		c_index[c_o][c_d] = c_od;
		c_index[c_d][c_o] = c_od;
		// 時刻表作成
		l_html += "<h3 id=\"" + c_od + "\"><a href=\"#" + c_o + "\">" + c_o + "</a>～<a href=\"#" + c_d + "\">" + c_d + "</a>　" + c_airport_index[c_o].title_ja + "～" + c_airport_index[c_d].title_ja + "　" + c_airport_index[c_o].title_en + "～" + c_airport_index[c_d].title_en + "</h3>";
		l_html += "<h4><a href=\"#" + c_o + "\">" + c_o + "</a>→<a href=\"#" + c_d + "\">" + c_d + "</a>　" + c_airport_index[c_o].title_ja + "→" + c_airport_index[c_d].title_ja + "　" + c_airport_index[c_o].title_en + "→" + c_airport_index[c_d].title_en + "</h4>";
		l_html += "<table>";
		l_html += "<tr><td>運航会社</td><td class=\"便名\">便名</td><td class=\"機種\">機種</td><td>出発時刻</td><td>到着時刻</td><td>運航曜日</td><td>有効期限開始</td><td>有効期限終了</td><td class=\"注釈\">注釈</td></tr>";
		l_html += "<tr><td>airline</td><td>flight number</td><td>aircraft type</td><td>origin time</td><td>destination time</td><td></td><td>valid from</td><td>valid to</td><td></td></tr>";
		for (const c_flight of c_od_index[c_od]) {
			l_html += "<tr><td><a href=\"#" + c_flight.airline + "\">" + c_flight.airline + "</a></td><td>" + c_flight.flight_number + "</td><td>" + c_flight.aircraft_type + "</td><td>" + c_day_difference[c_flight.origin_day_difference] + c_flight.origin_time + "</td><td>" + c_day_difference[c_flight.destination_day_difference] + c_flight.destination_time + "</td><td>" + c_flight.calendar + "</td><td>" + c_flight.is_valid_from.substr(0, 10) + "</td><td>" + c_flight.is_valid_to.substr(0, 10) + "</td><td>" + c_flight.note_ja + "</td></tr>";
		}
		l_html += "</table>";
		
		if (c_od_index[c_do] === undefined) {
			continue;
		}
		
		l_html += "<h4><a href=\"#" + c_d + "\">" + c_d + "</a>→<a href=\"#" + c_o + "\">" + c_o + "</a>　" + c_airport_index[c_d].title_ja + "→" + c_airport_index[c_o].title_ja + "　" + c_airport_index[c_d].title_en + "→" + c_airport_index[c_o].title_en + "</h4>";
		l_html += "<table>";
		l_html += "<tr><td>運航会社</td><td class=\"便名\">便名</td><td class=\"機種\">機種</td><td>出発時刻</td><td>到着時刻</td><td>運航曜日</td><td>有効期限開始</td><td>有効期限終了</td><td class=\"注釈\">注釈</td></tr>";
		l_html += "<tr><td>airline</td><td>flight number</td><td>aircraft type</td><td>origin time</td><td>destination time</td><td></td><td>valid from</td><td>valid to</td><td></td></tr>";
		for (const c_flight of c_od_index[c_do]) {
			l_html += "<tr><td><a href=\"#" + c_flight.airline + "\">" + c_flight.airline + "</a></td><td>" + c_flight.flight_number + "</td><td>" + c_flight.aircraft_type + "</td><td>" + c_day_difference[c_flight.origin_day_difference] + c_flight.origin_time + "</td><td>" + c_day_difference[c_flight.destination_day_difference] + c_flight.destination_time + "</td><td>" + c_flight.calendar + "</td><td>" + c_flight.is_valid_from.substr(0, 10) + "</td><td>" + c_flight.is_valid_to.substr(0, 10) + "</td><td>" + c_flight.note_ja + "</td></tr>";
		}
		l_html += "</table>";
		
	}
	// 目次作成
	let l_index_html = "<h2>目次</h2><table>";
	for (const c_o in  c_index) {
		l_index_html += "<tr id=\"" + c_o + "\"><td>" + c_o + " " + c_airport_index[c_o].title_ja + " " + c_airport_index[c_o].title_en + "</td><td>";
		let l_first = true;
		for (const c_d in c_index[c_o]) {
			if (l_first === true) {
				l_first = false;
			} else {
				l_index_html += ", ";
			}
			l_index_html += "<a href=\"#" + c_index[c_o][c_d] + "\">" + c_d + " " + c_airport_index[c_d].title_ja + " " + c_airport_index[c_d].title_en + "</a>";
		}
		l_index_html += "</td></tr>"
	}
	l_index_html += "</table>";
	
	// 運航会社
	l_operator_index = "<h2>運航会社</h2><table>";
	for (const c_operator of c_operators) {
		l_operator_index += "<tr id=\"" + c_operator.operator + "\"><td>" + c_operator.operator + "</td><td>" + c_operator.title_ja + "</td><td>" + c_operator.title_en + "</td></tr>";
	}
	l_operator_index += "</table>";
	
	const c_div1 = document.getElementById("div1").innerHTML = l_operator_index + l_index_html + l_html;
	
	
	
}

function f_convert_csv_to_json(a_csv) {
	//CSVを2次元配列にする
	let l_1 = 0;
	let l_2 = 0;
	const c_array = [[]];
	a_csv.replace(/\r?\n$/, "").replace(new RegExp(',|\r?\n|[^,"\r\n][^,\r\n]*|"(?:[^"]|"")*"', "g"), function(a1) {
		if (a1 === ",") {
			l_2 += 1;
			c_array[l_1][l_2] = "";
		} else if (a1 === "\n" || a1 === "\r\n") {
			l_1 += 1;
			c_array[l_1] = [];
			l_2 = 0;
		} else if (a1.charAt(0) !== "\"") {
			c_array[l_1][l_2] = a1;
		} else {
			c_array[l_1][l_2] = a1.slice(1, -1).replace(/""/g, "\"");
		}
	});
	//二次元配列をJSONに変換する
	const c_json = [];
	for (let i1 = 1; i1 < c_array.length; i1++) {
		c_json.push({});
		for (let i2 = 0; i2 < c_array[i1].length; i2++) {
			c_json[i1 - 1][c_array[0][i2]] = c_array[i1][i2].replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace("\"", "&quot;").replace("'", "&apos;");
		}
	}
	//この段階では全て文字列型になっている
	return c_json;
}

			//]]>
		</script>
		<title>日本国航空時刻表</title>
	</head>
	<body>
		<h1>日本国航空時刻表</h1>
		<p>2022-05-07 作成</p>
		<p>2022-05-08 リンク拡充</p>
		<p>2022-05-08 列幅固定</p>
		<p>公共交通オープンデータセンターにおいて提供される公共交通データを利用しています。公共交通事業者により提供されたデータを元にしていますが、必ずしも正確・完全なものとは限りません。表示内容について、公共交通事業者への直接の問合せは行わないでください。お問い合わせは、以下のウェブサイトのメールアドレスにお願いします。豐多摩研究所 トップページ <a href="https://ss1.xrea.com/toyotama.g1.xrea.com/index.xhtml">https://ss1.xrea.com/toyotama.g1.xrea.com/index.xhtml</a></p>
		<p>ANAの国内線と国際線、JALの国内線等は含まれますが、全ての運航会社を網羅しているものではありません。</p>
		<p>出発時刻と到着時刻は現地時間、有効期間は日本標準時（UTC+9）によります。</p>
		<div id="div1"></div>
	</body>
</html>
