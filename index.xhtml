<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta charset="UTF-8" />
		<style>table {border-collapse: collapse; table-layout: fixed;} th, td {border: solid 1px;} .便名 {width: 16em;} .機種 {width: 8em;} .注釈 {width: 16em;} .JAL_color {background-color: #fce5e8;} .ADO_color {background-color: #a2d7d4;} .IBX_color {background-color: #fadcea;} .JTA_color {background-color: #d2cde6;} .ORC_color {background-color: #e4deee;} .SFJ_color {background-color: #cad5dc;} .SNJ_color {background-color: #fbdac8;} </style>
		<script>
			//<![CDATA[
f_main();
async function f_main() {
	const c_schedules = f_convert_csv_to_json(await ((await (fetch("schedule.csv"))).text()));
	const c_no_schedules = f_convert_csv_to_json(await ((await (fetch("no_schedule.csv"))).text()));
	const c_airports = f_convert_csv_to_json(await ((await (fetch("airport.csv"))).text()));
	const c_operators = f_convert_csv_to_json(await ((await (fetch("operator.csv"))).text()));
	
	// 時刻がないものを追加
	for (const c_route of c_no_schedules) {
		c_schedules.push({"operator": "","origin_airport": c_route["origin_airport"],"destination_airport": c_route["destination_airport"],"airline": c_route["airline"],"flight_number": "","aircraft_type": "","origin_time": "","origin_day_difference": "","destination_time": "","destination_day_difference": "","calendar": "","is_valid_from": "","is_valid_to": "","note_ja": "時刻データ未入力","date": ""});
		c_schedules.push({"operator": "","origin_airport": c_route["destination_airport"],"destination_airport": c_route["origin_airport"],"airline": c_route["airline"],"flight_number": "","aircraft_type": "","origin_time": "","origin_day_difference": "","destination_time": "","destination_day_difference": "","calendar": "","is_valid_from": "","is_valid_to": "","note_ja": "時刻データ未入力","date": ""});
	}
	
	const c_od_index = {};
	for (const c_flight of c_schedules) {
		const c_od = c_flight["origin_airport"] + "_" + c_flight["destination_airport"];
		if (c_od_index[c_od] === undefined) {
			c_od_index[c_od] = [];
		}
		c_od_index[c_od].push(c_flight);
	}
	// 到着時刻でソート
	for (const c_od in c_od_index) {
		c_od_index[c_od].sort(f_sort_destination_time);
	}
	
	const c_airport_index = {};
	for (const c_airport of c_airports) {
		c_airport_index[c_airport["airport"]] = c_airport;
	}
	// ない空港があれば追加
	for (const c_flight of c_schedules) {
		if (c_airport_index[c_flight["origin_airport"]] === undefined) {
			c_airports.push({"airport": c_flight["origin_airport"], "title_ja": null, "title_en": null});
			c_airport_index[c_flight["origin_airport"]] = c_airports[c_airports.length - 1];
		}
		if (c_airport_index[c_flight["destination_airport"]] === undefined) {
			c_airports.push({"airport": c_flight["destination_airport"], "title_ja": null, "title_en": null});
			c_airport_index[c_flight["destination_airport"]] = c_airports[c_airports.length - 1];
		}
	}
	
	const c_operator_index = {};
	for (const c_operator of c_operators) {
		c_operator_index[c_operator["operator"]] = c_operator;
	}
	
	const c_day_difference ={"0": "", "": "", "1": "翌日", "2": "翌翌日", "-1": "前日", "-2": "前前日"};
	
	// 時刻表作成
	let l_html = "";
	for (let i1 = 0; i1 < c_airports.length; i1++) {
		for (let i2 = 0; i2 < i1; i2++) {
			const c_o = c_airports[i1]["airport"];
			const c_d = c_airports[i2]["airport"];
			const c_od = c_o + "_" + c_d;
			const c_do = c_d + "_" + c_o;
			if (c_od_index[c_od] === undefined && c_od_index[c_do] === undefined) {
				continue;
			}
			l_html += "<h3 id=\"" + c_od + "\"><a href=\"#" + c_o + "\">" + c_o + " " + c_airport_index[c_o]["title_ja"] + " " + c_airport_index[c_o]["title_en"] + "</a> ～ <a href=\"#" + c_d + "\">" + c_d + " " + c_airport_index[c_d]["title_ja"] + " " + c_airport_index[c_d]["title_en"] + "</a></h3>";
			if (c_od_index[c_od] !== undefined) {
				l_html += "<h4><a href=\"#" + c_o + "\">" + c_o + " " + c_airport_index[c_o]["title_ja"] + " " + c_airport_index[c_o]["title_en"] + "</a> → <a href=\"#" + c_d + "\">" + c_d + " " + c_airport_index[c_d]["title_ja"] + " " + c_airport_index[c_d]["title_en"] + "</a></h4>";
				l_html += "<table>";
				l_html += "<tr><td>運航会社</td><td class=\"便名\">便名</td><td class=\"機種\">機種</td><td>出発時刻</td><td>到着時刻</td><td>運航曜日</td><td>有効期限開始</td><td>有効期限終了</td><td class=\"注釈\">注釈</td></tr>";
				l_html += "<tr><td>airline</td><td>flight number</td><td>aircraft type</td><td>origin time</td><td>destination time</td><td></td><td>valid from</td><td>valid to</td><td></td></tr>";
				for (const c_flight of c_od_index[c_od]) {
					l_html += "<tr><td class=\"" + c_flight["airline"] + "_color\"><a href=\"#" + c_flight["airline"] + "\">" + c_flight["airline"] + "</a></td><td>" + c_flight["flight_number"] + "</td><td>" + c_flight["aircraft_type"] + "</td><td>" + c_day_difference[c_flight["origin_day_difference"]] + c_flight["origin_time"] + "</td><td>" + c_day_difference[c_flight["destination_day_difference"]] + c_flight["destination_time"] + "</td><td>" + c_flight["calendar"] + "</td><td>" + c_flight["is_valid_from"].substr(0, 10) + "</td><td>" + c_flight["is_valid_to"].substr(0, 10) + "</td><td>" + c_flight["note_ja"] + "</td></tr>";
				}
				l_html += "</table>";
			}
			if (c_od_index[c_do] !== undefined) {
				l_html += "<h4><a href=\"#" + c_d + "\">" + c_d + " " + c_airport_index[c_d]["title_ja"] + " " + c_airport_index[c_d]["title_en"] + "</a> → <a href=\"#" + c_o + "\">" + c_o + " " + c_airport_index[c_o]["title_ja"] + " " + c_airport_index[c_o]["title_en"] + "</a></h4>";
				l_html += "<table>";
				l_html += "<tr><td>運航会社</td><td class=\"便名\">便名</td><td class=\"機種\">機種</td><td>出発時刻</td><td>到着時刻</td><td>運航曜日</td><td>有効期限開始</td><td>有効期限終了</td><td class=\"注釈\">注釈</td></tr>";
				l_html += "<tr><td>airline</td><td>flight number</td><td>aircraft type</td><td>origin time</td><td>destination time</td><td></td><td>valid from</td><td>valid to</td><td></td></tr>";
				for (const c_flight of c_od_index[c_do]) {
					l_html += "<tr><td class=\"" + c_flight["airline"] + "_color\"><a href=\"#" + c_flight["airline"] + "\">" + c_flight["airline"] + "</a></td><td>" + c_flight["flight_number"] + "</td><td>" + c_flight["aircraft_type"] + "</td><td>" + c_day_difference[c_flight["origin_day_difference"]] + c_flight["origin_time"] + "</td><td>" + c_day_difference[c_flight["destination_day_difference"]] + c_flight["destination_time"] + "</td><td>" + c_flight["calendar"] + "</td><td>" + c_flight["is_valid_from"].substr(0, 10) + "</td><td>" + c_flight["is_valid_to"].substr(0, 10) + "</td><td>" + c_flight["note_ja"] + "</td></tr>";
				}
				l_html += "</table>";
			}
		}
	}
	
	// 目次作成
	let l_index_html = "<h2>目次</h2><table>";
	for (let i1 = 0; i1 < c_airports.length; i1++) {
		const c_o = c_airports[i1]["airport"];
		l_index_html += "<tr id=\"" + c_o + "\"><td>" + c_o + " " + c_airport_index[c_o]["title_ja"] + " " + c_airport_index[c_o]["title_en"] + "</td><td>";
		let l_first = true;
		for (let i2 = 0; i2 < c_airports.length; i2++) {
			const c_d = c_airports[i2]["airport"];
			const c_od = c_airports[Math.max(i1, i2)]["airport"] + "_" + c_airports[Math.min(i1, i2)]["airport"];
			const c_od2 = c_airports[Math.min(i1, i2)]["airport"] + "_" + c_airports[Math.max(i1, i2)]["airport"];
			if (c_od_index[c_od] === undefined && c_od_index[c_od2] === undefined) {
				continue;
			}
			if (l_first === true) {
				l_first = false;
			} else {
				l_index_html += ", ";
			}
			l_index_html += "<a href=\"#" + c_od + "\">" + c_d + " " + c_airport_index[c_d]["title_ja"] + " " + c_airport_index[c_d]["title_en"] + "</a>";
		}
		l_index_html += "</td></tr>"
	}
	l_index_html += "</table>";
	
	
	// 運航会社
	l_operator_index = "<h2>運航会社</h2><table>";
	for (const c_operator of c_operators) {
		l_operator_index += "<tr id=\"" + c_operator.operator + "\"><td class=\"" + c_operator.operator + "_color\">" + c_operator.operator + "</td><td>" + c_operator.title_ja + "</td><td>" + c_operator.title_en + "</td></tr>";
	}
	l_operator_index += "</table>";
	
	
	
	// 一覧表作成
	let l_table_html = "<h2>日本国内線路線一覧表</h2><table style=\"width: auto;\">";
	// 空港名
	l_table_html += "<tr><td>　　　</td><td>　　　　　　　</td>";
	for (let i1 = 0; i1 < c_airports.length; i1++) {
		if (c_airports[i1]["国"] === "国外") {
			continue;
		}
		l_table_html += "<td><span style=\"writing-mode: vertical-rl; line-height: 1em; width: 1em;\"><a href=\"#" + c_airports[i1]["airport"] + "\">" + c_airports[i1]["airport"] + "</a></span></td>";
	}
	l_table_html += "</tr>";
	l_table_html += "<tr><td></td><td></td>";
	for (let i1 = 0; i1 < c_airports.length; i1++) {
		if (c_airports[i1]["国"] === "国外") {
			continue;
		}
		l_table_html += "<td><span style=\"writing-mode: vertical-rl; line-height: 1em; width: 1em;\"><a href=\"#" + c_airports[i1]["airport"] + "\">" + c_airports[i1]["title_ja"] + "</a></span></td>";
	}
	l_table_html += "</tr>";
	// 本体
	for (let i1 = 0; i1 < c_airports.length; i1++) {
		if (c_airports[i1]["国"] === "国外") {
			continue;
		}
		l_table_html += "<tr>";
		l_table_html += "<td><a href=\"#" + c_airports[i1]["airport"] + "\">" + c_airports[i1]["airport"] + "</a></td><td><a href=\"#" + c_airports[i1]["airport"] + "\">" + c_airports[i1]["title_ja"] + "</a></td>";
		for (let i2 = 0; i2 < c_airports.length; i2++) {
			if (c_airports[i2]["国"] === "国外") {
				continue;
			}
			const c_o = c_airports[i1]["airport"];
			const c_d = c_airports[i2]["airport"];
			const c_od = c_o + "_" + c_d;
			const c_do = c_d + "_" + c_o;
			let l_td = "<td></td>";
			if (c_od_index[c_od] !== undefined || c_od_index[c_do] !== undefined) {
				if (i1 < i2) {
					l_td = "<td><a href=\"#" + c_do + "\">●</a></td>";
				} else {
					l_td = "<td><a href=\"#" + c_od + "\">●</a></td>";
				}
			}
			l_table_html += l_td;
		}
		l_table_html += "</tr>";
	}
	l_table_html += "</table>";
	
	const c_div1 = document.getElementById("div1").innerHTML = l_operator_index + l_table_html + l_index_html + l_html;
}

function f_convert_csv_to_json(a_csv) {
	//CSVを2次元配列にする
	let l_1 = 0;
	let l_2 = 0;
	const c_array = [[]];
	a_csv.replace(/\r?\n$/, "").replace(new RegExp(',|\r?\n|[^,"\r\n][^,\r\n]*|"(?:[^"]|"")*"', "g"), function(a1) {
		if (a1 === ",") {
			l_2 += 1;
			c_array[l_1][l_2] = "";
		} else if (a1 === "\n" || a1 === "\r\n") {
			l_1 += 1;
			c_array[l_1] = [];
			l_2 = 0;
		} else if (a1.charAt(0) !== "\"") {
			c_array[l_1][l_2] = a1;
		} else {
			c_array[l_1][l_2] = a1.slice(1, -1).replace(/""/g, "\"");
		}
	});
	//二次元配列をJSONに変換する
	const c_json = [];
	for (let i1 = 1; i1 < c_array.length; i1++) {
		c_json.push({});
		for (let i2 = 0; i2 < c_array[i1].length; i2++) {
			c_json[i1 - 1][c_array[0][i2]] = c_array[i1][i2].replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;").replace("\"", "&quot;").replace("'", "&apos;");
		}
	}
	//この段階では全て文字列型になっている
	return c_json;
}

function f_sort_destination_time(a1, a2) {
	if (a1["destination_time"] < a2["destination_time"]) {
		return -1;
	}
	if (a1["destination_time"] > a2["destination_time"]) {
		return 1;
	}
	return 0;
}

			//]]>
		</script>
		<title>日本国航空時刻表</title>
	</head>
	<body>
		<h1>日本国航空時刻表</h1>
		<p>2022-05-07 作成</p>
		<p>2022-05-08 リンク拡充</p>
		<p>2022-05-08 列幅固定</p>
		<p>2022-05-08 運航会社色を表示</p>
		<p>2022-05-14 時刻データ更新</p>
		<p>2022-05-14 ソートを追加</p>
		<p>2022-05-14 表示順を変更</p>
		<p>2022-05-14 リンク修正</p>
		<p>2022-05-26 路線図追加</p>
		<p>2022-05-26 路線一覧表追加</p>
		<p>2022-05-26 時刻なし路線追加</p>
		<p>2022-05-27 時刻データ更新</p>
		<p>本ウェブサイトは必ずしも最新・正確な情報を載せているわけではありません。</p>
		<p>時刻は、公共交通オープンデータセンターにおいて提供される公共交通データを利用しています。公共交通事業者により提供されたデータを元にしていますが、必ずしも正確・完全なものとは限りません。表示内容について、公共交通事業者への直接の問合せは行わないでください。お問い合わせは、以下のウェブサイトのメールアドレスにお願いします。豐多摩研究所 トップページ <a href="https://ss1.xrea.com/toyotama.g1.xrea.com/index.xhtml">https://ss1.xrea.com/toyotama.g1.xrea.com/index.xhtml</a></p>
		<p>ANAの国内線と国際線、JALの国内線等は含まれますが、全ての運航会社を網羅しているものではありません。ODPTの時刻では、ジェイエア、日本エアコミューター、北海道エアシステム、ANAウイングス、エアージャパンは、運送の共同引受を行っている日本航空と全日本空輸のデータとして入っているようです。フジドリームエアラインズ、天草エアラインは全便日本航空とのコードシェアとなっているようで、便名の記載を省略しています（注釈でFDA、AMXと表記）。国際線のみの日本貨物航空とZIPAIR Tokyoは載せていません。</p>
		<p>出発時刻と到着時刻は現地時間、有効期間は日本標準時（UTC+9）によります。</p>
		<object data="map.svg" style="width:auto;"></object>
		<p>上の路線図上の空港名や□をクリックすると、空港または路線の時刻表へ移動します。</p>
		<div id="div1"></div>
	</body>
</html>
